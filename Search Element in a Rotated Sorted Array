
#include <bits/stdc++.h>
using namespace std;

int search(vector<int>& arr, int n, int k) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;

        //if mid points the target
        if (arr[mid] == k) return mid;

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                //element exists:
                high = mid - 1;
            }
            else {
                //element does not exist:
                low = mid + 1;
            }
        }
        else { //if right part is sorted:
            if (arr[mid] <= k && k <= arr[high]) {
                //element exists:
                low = mid + 1;
            }
            else {
                //element does not exist:
                high = mid - 1;
            }
        }
    }
    return -1;
}

int main()
{
    vector<int> arr = {7, 8, 9, 1, 2, 3, 4, 5, 6};
    int n = 9, k = 1;
    int ans = search(arr, n, k);
    if (ans == -1)
        cout << "Target is not present.\n";
    else
        cout << "The index is: " << ans << "\n";
    return 0;
}



// approach 2 (pivot element )

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int pivot, s=0,e=nums.size()-1;
        int mid = s+(e-s)/2;

        while(s<=e){
            if(nums[mid]==target){
                return mid;
            }

            else if(nums[0]<=nums[mid]){
                s = mid+1;
            }
            else{
                e=mid-1;
            }

            mid= s+(e-s)/2;
        }
        pivot= e;

        if( target >= nums[0] && target <= nums[pivot] )
        {
            e = pivot;
            s = 0;
        }
        else 
        {
            s = pivot;
            e = nums.size()-1;
        }
        while( s <= e ){
            mid = s + ( e - s ) / 2 ;
            if(nums[mid] == target ) return mid;

            else if ( nums[mid] < target ) s = mid+1;
            else e = mid -1;
        }
        return -1;
        
    }
};

