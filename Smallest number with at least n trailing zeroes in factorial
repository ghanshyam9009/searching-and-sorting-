Input : n = 1
Output : 5 
1!, 2!, 3!, 4! does not contain trailing zero.
5! = 120, which contains one trailing zero.

Input : n = 6
Output : 25


class Solution {
public:
    int trailingZeroes(int n) {
        long long n5 = 0;
        long long m5 = 5;

        while (n / m5 > 0) {
            n5 += n / m5;
            m5 *= 5;
        }

        return n5;
    }
};

    //    one line code
    // return n == 0 ? 0 : n / 5 + trailingZeroes(n / 5);








#include<bits/stdc++.h>
using namespace std;

bool check(int p, int n)
{
	int temp = p, count = 0, f = 5;
	while (f <= temp)
	{
		count += temp/f;
		f = f*5;
	}
	return (count >= n);
}


int findNum(int n)
{
	// If n equal to 1, return 5.
	// since 5! = 120.
	if (n==1)
		return 5;

	int low = 0;
	int high = 5*n;

	
	while (low <high)
	{
		int mid = (low + high) >> 1;

		// Checking if mid's factorial contains
		// n trailing zeroes.
		if (check(mid, n))
			high = mid;
		else
			low = mid+1;
	}

	return low;
}


